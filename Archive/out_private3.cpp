#include<iostream> 
using namespace std;
int retval=0;
int main() {
int acknowledgmentNumberTracker = 0;
int adaptiveTimeoutThreshold = 0;
int congestionWindowSize = 0;
int cyclicRedundancyCheck = 0;
int finalNetworkState = 0;
int flowControlMechanism = 0;
int internetProtocolVersion = 0;
int maximumTransmissionUnit = 0;
int packetErrorRateCalculator = 0;
int roundTripTimeEstimator = 0;
int t1 = 0;
int t10 = 0;
int t11 = 0;
int t12 = 0;
int t13 = 0;
int t14 = 0;
int t15 = 0;
int t16 = 0;
int t17 = 0;
int t18 = 0;
int t2 = 0;
int t3 = 0;
int t4 = 0;
int t5 = 0;
int t6 = 0;
int t7 = 0;
int t8 = 0;
int t9 = 0;
int transmissionControlBlock = 0;
t1 = 4;
internetProtocolVersion = t1;
t2 = 1500;
maximumTransmissionUnit = t2;
t3 = 32;
cyclicRedundancyCheck = t3;
t4 = 1024;
transmissionControlBlock = t4;
t5 = 200;
roundTripTimeEstimator = t5;
t6 = 65536;
acknowledgmentNumberTracker = t6;
t7 = 5;
packetErrorRateCalculator = t7;
t8 = 100;
flowControlMechanism = t8;
t9 = 300;
adaptiveTimeoutThreshold = t9;
t10 = 65535;
congestionWindowSize = t10;
t11 = 0;
t11 = acknowledgmentNumberTracker - cyclicRedundancyCheck;t12 = 0;
t12 = t11 + maximumTransmissionUnit;roundTripTimeEstimator = t12;
t13 = 0;
t13 = congestionWindowSize / packetErrorRateCalculator;t14 = 0;
t14 = t13 + flowControlMechanism;congestionWindowSize = t14;
t15 = 0;
t15 = transmissionControlBlock + adaptiveTimeoutThreshold;t16 = 0;
t16 = t15 - internetProtocolVersion;adaptiveTimeoutThreshold = t16;
t17 = 0;
t17 = roundTripTimeEstimator + congestionWindowSize;t18 = 0;
t18 = t17 + adaptiveTimeoutThreshold;finalNetworkState = t18;
retval = 0;
return retval;
}
